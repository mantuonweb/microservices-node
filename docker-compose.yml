version: '3.8'

services:
  consul:
    image: hashicorp/consul:latest
    container_name: ms-consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: ms-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - microservice-network

  mongodb:
    image: mongo:latest
    container_name: ms-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - microservice-network

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: ms-product-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://guest:guest@ms-rabbitmq:5672
    volumes:
      - ./product-service:/usr/src/app
    restart: unless-stopped
    depends_on:
      consul:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservice-network
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: ms-order-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
    volumes:
      - ./order-service:/usr/src/app
    restart: unless-stopped
    depends_on:
      consul:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservice-network
  
  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    container_name: ms-customer-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
    volumes:
      - ./customer-service:/usr/src/app
    restart: unless-stopped
    depends_on:
      consul:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservice-network

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: ms-inventory-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
    volumes:
      - ./inventory-service:/usr/src/app
    restart: unless-stopped
    depends_on:
      consul:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservice-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: ms-gateway-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./api-gateway:/usr/src/app
    restart: unless-stopped
    depends_on:
      - product-service
      - order-service
      - customer-service
      - inventory-service
    networks:
      - microservice-network
volumes:
  mongodb_data:
  rabbitmq_data:
  rabbitmq_logs:

networks:
  microservice-network:
    driver: bridge
